
1. Which States (or Markets) consistently exceed—or
   underperform—their sales and profit targets?

SELECT
  State,
  SUM(Sales)         AS actual_sales,
  SUM("Target_sales ") AS target_sales,
  SUM(Profit)        AS actual_profit,
  SUM(Target_profit) AS target_profit,
  SUM(Sales) - SUM("Target_sales ")   AS sales_diff,
  SUM(Profit) - SUM(Target_profit)     AS profit_diff
FROM coffee_sales
GROUP BY State
ORDER BY sales_diff DESC;

2. How does marketing spend correlate with actual sales and profit by Market_size?

SELECT
  Market_size,
  CORR(Marketing, Sales) AS corr_marketing_sales,
  CORR(Marketing, Profit) AS corr_marketing_profit
FROM coffee_sales
GROUP BY Market_size;

3. Which product lines deliver the highest profit volatility?

SELECT
  Product_line,
  AVG(
  STDDEV(Profit) AS profit_stddev
FROM coffee_sales
GROUP BY Product_line
ORDER BY profit_stddev DESC;

4. Are there seasonal patterns in sales and profit (month‑over‑month)?

SELECT
  EXTRACT(MONTH FROM Date) AS month,
  ROUND(AVG(Sales),0)  AS avg_monthly_sales,
  ROUND(AVG(Profit),0) AS avg_monthly_profit
FROM coffee_sales
GROUP BY month
ORDER BY month;

5. What’s the impact of COGS fluctuations on total profitability over time?

SELECT
  DATE_TRUNC('month', Date) AS month,
  ROUND(AVG(Cogs),2)    AS avg_cogs,
  SUM(Profit)           AS total_profit
FROM coffee_sales
GROUP BY month
ORDER BY month;


6. Which individual transactions are outliers in Sales?

WITH sales_quantiles AS (
  SELECT
    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Sales) AS q1,
    PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Sales) AS q3
  FROM coffee_sales
)
SELECT
  cs.Date,
  cs.Sales
FROM coffee_sales cs
CROSS JOIN sales_quantiles sq
WHERE cs.Sales < sq.q1 - 1.5 * (sq.q3 - sq.q1)
   OR cs.Sales > sq.q3 + 1.5 * (sq.q3 - sq.q1)
ORDER BY cs.Sales DESC;

7. How does Inventory Margin relate to realized Profit?

SELECT
  CORR("Inventory Margin", Profit) AS corr_inventory_profit
FROM coffee_sales;


8. Which product segments (“Leaves” vs. “Beans”) show the strongest growth trajectory?

SELECT
  DATE_TRUNC('month', Date) AS month,
  Product_line,
  SUM(Sales)              AS total_sales
FROM coffee_sales
WHERE Product_line IN ('Leaves','Beans')
GROUP BY month, Product_line
ORDER BY month, Product_line;

9. Where are the biggest gaps between actual vs. target profit?

SELECT
  State,
  SUM(Target_profit) - SUM(Profit) AS profit_gap
FROM coffee_sales
GROUP BY State
ORDER BY profit_gap DESC;


10. Simple linear‐trend model to forecast next 3 months’ sales

(Note: pure SQL forecasting is basic—consider exporting to R/Python for advanced time‑series.)

WITH monthly_sales AS (
  SELECT
    DATE_TRUNC('month', Date) AS month,
    SUM(Sales)               AS total_sales,
    ROW_NUMBER() OVER (ORDER BY DATE_TRUNC('month', Date)) AS seq
  FROM coffee_sales
  GROUP BY month
),
model AS (
  SELECT
    -- slope = Cov(seq, total_sales) / Var(seq)
    (SUM(seq * total_sales) - AVG(seq)*SUM(total_sales)) /
    (SUM(seq * seq) - AVG(seq)*SUM(seq)) AS slope,
    -- intercept = avg(total_sales) - slope * avg(seq)
    AVG(total_sales) - 
    ((SUM(seq * total_sales) - AVG(seq)*SUM(total_sales)) /
     (SUM(seq * seq) - AVG(seq)*SUM(seq))) * AVG(seq) AS intercept
  FROM monthly_sales
),
forecast AS (
  SELECT
    month,
    total_sales,
    seq,
    slope,
    intercept
  FROM monthly_sales CROSS JOIN model
),
future AS (
  SELECT
    (SELECT month FROM monthly_sales ORDER BY month DESC LIMIT 1)
      + (n * INTERVAL '1 month') AS forecast_month,
    intercept + slope * ( (SELECT MAX(seq) FROM monthly_sales) + n ) AS forecast_sales
  FROM generate_series(1,3) AS n
)
SELECT * FROM future;
